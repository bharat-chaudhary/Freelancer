@model IEnumerable<Freelancer.Models.ProjectTask>

@{
    Layout = "~/Views/Shared/_FreelancerLayout.cshtml";
    ViewData["Title"] = "Task List";
}

<div class="container mt-4">
    <h2 class="mb-4">@ViewBag.ProjectTitle</h2>

    @if (ViewBag.ProjectTitle != null && ViewBag.ProjectId != null)
    {
        <div class="alert alert-info mb-4">
            <h4 class="alert-heading">Filtered by Project: @ViewBag.ProjectTitle</h4>
        </div>
    }

    <div class="card shadow-sm">
        <div class="card-body p-0">
            <table class="table table-hover mb-0">
                <thead class="table-light">
                    <tr>
                        <th>Title</th>
                        <th>Status</th>
                        <th>Due Date</th>
                        <th>Completion Date</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (!Model.Any())
                    {
                        <tr>
                            <td colspan="5" class="text-center text-muted">No tasks available.</td>
                        </tr>
                    }
                    else
                    {
                        foreach (var task in Model)
                        {
                            <tr>
                                <td>@task.Title</td>
                                <td>
                                    <span class="badge @GetStatusBadgeClass(task.Status)">
                                        @task.Status
                                    </span>
                                </td>
                                <td>
                                    @(task.DueDate.HasValue && task.DueDate.Value != DateTime.MinValue
                                        ? task.DueDate.Value.ToString("yyyy-MM-dd")
                                        : "N/A")
                                </td>

                                <td>
                                    @(task.CompletionDate.HasValue && task.CompletionDate.Value != DateTime.MinValue
                                        ? task.CompletionDate.Value.ToString("yyyy-MM-dd")
                                        : "N/A")
                                </td>

                                <td>
                                    <div class="btn-group btn-group-sm">
                                        <a href="@Url.Action("Edit", new { id = task.TaskId })" class="btn btn-outline-primary">Edit</a>
                                        <a href="@Url.Action("Details", new { id = task.TaskId })" class="btn btn-outline-info">Details</a>
                                        <a href="@Url.Action("Delete", new { id = task.TaskId })" class="btn btn-outline-danger" onclick="return confirm('Are you sure you want to delete this task?');">Delete</a>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>

    <div class="mt-3">
        <a href="@Url.Action("Create", new { projectId = ViewBag.ProjectId })" class="btn btn-success">
            <i class="fas fa-plus"></i> Create New Task
        </a>
    </div>
</div>

@functions {
    string GetStatusBadgeClass(Freelancer.Models.TaskStatus status)
    {
        return status switch
        {
            Freelancer.Models.TaskStatus.Completed => "bg-success",
            Freelancer.Models.TaskStatus.InProgress => "bg-primary",
            Freelancer.Models.TaskStatus.OnHold => "bg-warning",
            Freelancer.Models.TaskStatus.Cancelled => "bg-danger",
            _ => "bg-secondary"
        };
    }
}
